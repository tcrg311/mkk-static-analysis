<?xml version="1.0"?>

<ruleset name="FEI-K8" xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

  <description>Ferguson Custom Ruleset for Kubernetes environment</description>

  <rule ref="category/java/errorprone.xml/JumbledIncrementer" />
	<rule ref="category/java/errorprone.xml/OverrideBothEqualsAndHashcode" />
	<rule ref="category/java/multithreading.xml/DoubleCheckedLocking" />
	<rule ref="category/java/errorprone.xml/ReturnFromFinallyBlock" />
	<rule ref="category/java/performance.xml/BooleanInstantiation" />
	<rule ref="category/java/errorprone.xml/ClassCastExceptionWithToArray" />
	<rule ref="category/java/errorprone.xml/AvoidDecimalLiteralsInBigDecimalConstructor" />
	<rule ref="category/java/errorprone.xml/MisplacedNullCheck" />
	<rule ref="category/java/multithreading.xml/AvoidThreadGroup" />
	<rule ref="category/java/errorprone.xml/BrokenNullCheck" />
	<rule ref="category/java/performance.xml/BigIntegerInstantiation" />
	<rule ref="category/java/errorprone.xml/AvoidUsingOctalValues" />
	<rule ref="category/java/bestpractices.xml/CheckResultSet" />
	<rule ref="category/java/errorprone.xml/AvoidMultipleUnaryOperators" />
	<rule ref="category/java/codestyle.xml/ExtendsObject" />
	<rule ref="category/java/errorprone.xml/CheckSkipResult" />
	<rule ref="category/java/errorprone.xml/AvoidBranchingStatementAsLastInLoop" />
	<rule ref="category/java/multithreading.xml/DontCallThreadRun" />
	<rule ref="category/java/errorprone.xml/DontUseFloatTypeForLoopIndices" />
	<rule ref="category/java/codestyle.xml/ControlStatementBraces" />
	<rule ref="category/java/errorprone.xml/ProperCloneImplementation" />
	<rule ref="category/java/errorprone.xml/CloneThrowsCloneNotSupportedException" />
	<rule ref="category/java/errorprone.xml/CloneMethodMustImplementCloneable" />
	<rule ref="category/java/errorprone.xml/DontImportSun" />
	<rule ref="category/java/errorprone.xml/SuspiciousOctalEscape" />
	<rule ref="category/java/codestyle.xml/CallSuperInConstructor" />
	<rule ref="category/java/errorprone.xml/AvoidAccessibilityAlteration" />
	<rule ref="category/java/errorprone.xml/DoNotCallGarbageCollectionExplicitly" />
	<rule ref="category/java/bestpractices.xml/OneDeclarationPerLine">
		<properties>
			<property name="strictMode" value="true" />
		</properties>
	</rule>
	<rule ref="category/java/design.xml/SimplifyBooleanReturns" />
	<rule ref="category/java/design.xml/SimplifyBooleanExpressions" />
	<rule ref="category/java/design.xml/AvoidDeeplyNestedIfStmts" />
	<rule ref="category/java/bestpractices.xml/AvoidReassigningParameters" />
	<rule ref="category/java/errorprone.xml/ConstructorCallsOverridableMethod" />
	<rule ref="category/java/bestpractices.xml/AccessorClassGeneration" />
	<rule ref="category/java/design.xml/FinalFieldCouldBeStatic" />
	<rule ref="category/java/errorprone.xml/CloseResource" />
	<rule ref="category/java/errorprone.xml/NonStaticInitializer" />
	<rule ref="category/java/bestpractices.xml/DefaultLabelNotLastInSwitchStmt" />
	<rule ref="category/java/errorprone.xml/NonCaseLabelInSwitchStatement" />
	<rule ref="category/java/performance.xml/OptimizableToArrayCall" />
	<rule ref="category/java/errorprone.xml/BadComparison" />
	<rule ref="category/java/errorprone.xml/EqualsNull" />
	<rule ref="category/java/errorprone.xml/InstantiationToGetClass" />
	<rule ref="category/java/errorprone.xml/IdempotentOperations" />
	<rule ref="category/java/design.xml/ImmutableField" />
	<rule ref="category/java/codestyle.xml/AvoidProtectedFieldInFinalClass" />
	<rule ref="category/java/errorprone.xml/AssignmentToNonFinalStatic" />
	<rule ref="category/java/errorprone.xml/MissingStaticMethodInNonInstantiatableClass" />
	<rule ref="category/java/multithreading.xml/AvoidSynchronizedAtMethodLevel" />
	<rule ref="category/java/errorprone.xml/MissingBreakInSwitch" />
	<rule ref="category/java/multithreading.xml/UseNotifyAllInsteadOfNotify" />
	<rule ref="category/java/errorprone.xml/AvoidInstanceofChecksInCatchClause" />
	<rule ref="category/java/design.xml/SimplifyConditional" />
	<rule ref="category/java/errorprone.xml/CompareObjectsWithEquals" />
	<rule ref="category/java/codestyle.xml/UnnecessaryLocalBeforeReturn" />
	<rule ref="category/java/multithreading.xml/NonThreadSafeSingleton" />
	<rule ref="category/java/bestpractices.xml/ConstantsInInterface" />
	<rule ref="category/java/multithreading.xml/UnsynchronizedStaticFormatter" />
	<rule ref="category/java/bestpractices.xml/PreserveStackTrace" />
	<rule ref="category/java/bestpractices.xml/UseCollectionIsEmpty" />
	<rule ref="category/java/design.xml/ClassWithOnlyPrivateConstructorsShouldBeFinal" />
	<rule ref="category/java/design.xml/SingularField">
		<properties>
			<property name="checkInnerClasses" value="true" />
		</properties>
	</rule>
	<rule ref="category/java/errorprone.xml/ReturnEmptyArrayRatherThanNull" />
	<rule ref="category/java/design.xml/AbstractClassWithoutAnyMethod" />
	<rule ref="category/java/codestyle.xml/AvoidProtectedMethodInFinalClassNotExtending" />
	<rule ref="category/java/errorprone.xml/EmptyCatchBlock">
		<properties>
			<property name="allowCommentedBlocks" value="true" />
		</properties>
	</rule>
	<rule ref="category/java/errorprone.xml/EmptyIfStmt" />
	<rule ref="category/java/errorprone.xml/EmptyWhileStmt" />
	<rule ref="category/java/errorprone.xml/EmptyTryBlock" />
	<rule ref="category/java/errorprone.xml/EmptyFinallyBlock" />
	<rule ref="category/java/errorprone.xml/EmptySwitchStatements" />
	<rule ref="category/java/errorprone.xml/EmptySynchronizedBlock" />
	<rule ref="category/java/errorprone.xml/EmptyStatementNotInLoop" />
	<rule ref="category/java/errorprone.xml/EmptyInitializer" />
	<rule ref="category/java/errorprone.xml/EmptyStatementBlock" />
	<rule ref="category/java/codestyle.xml/DuplicateImports" />
	<rule ref="category/java/codestyle.xml/DontImportJavaLang" />
	<rule ref="category/java/bestpractices.xml/UnusedImports" />
	<rule ref="category/java/errorprone.xml/ImportFromSamePackage" />
	<rule ref="category/java/codestyle.xml/UnnecessaryFullyQualifiedName" />
	<rule ref="category/java/errorprone.xml/UseProperClassLoader" />
	<rule ref="category/java/codestyle.xml/MDBAndSessionBeanNamingConvention" />
	<rule ref="category/java/codestyle.xml/RemoteSessionInterfaceNamingConvention" />
	<rule ref="category/java/codestyle.xml/LocalInterfaceSessionNamingConvention" />
	<rule ref="category/java/codestyle.xml/LocalHomeNamingConvention" />
	<rule ref="category/java/codestyle.xml/RemoteInterfaceNamingConvention" />
	<rule ref="category/java/errorprone.xml/StaticEJBFieldShouldBeFinal" />
	<rule ref="category/java/errorprone.xml/MissingSerialVersionUID" />
	<rule ref="category/java/errorprone.xml/TestClassWithoutTestCases" />
	<rule ref="category/java/errorprone.xml/UnnecessaryBooleanAssertion" />
	<rule ref="category/java/bestpractices.xml/UseAssertEqualsInsteadOfAssertTrue" />
	<rule ref="category/java/bestpractices.xml/UseAssertSameInsteadOfAssertTrue" />
	<rule ref="category/java/bestpractices.xml/UseAssertNullInsteadOfAssertTrue" />
	<rule ref="category/java/design.xml/SimplifyBooleanAssertion" />
	<rule ref="category/java/errorprone.xml/MoreThanOneLogger" />
	<rule ref="category/java/errorprone.xml/ProperLogger" />
	<rule ref="category/java/bestpractices.xml/ReplaceVectorWithList" />
	<rule ref="category/java/bestpractices.xml/ReplaceHashtableWithMap" />
	<rule ref="category/java/bestpractices.xml/ReplaceEnumerationWithIterator" />
	<rule ref="category/java/errorprone.xml/AvoidEnumAsIdentifier" />
	<rule ref="category/java/errorprone.xml/AvoidAssertAsIdentifier" />
	<rule ref="category/java/performance.xml/IntegerInstantiation" />
	<rule ref="category/java/performance.xml/ByteInstantiation" />
	<rule ref="category/java/performance.xml/ShortInstantiation" />
	<rule ref="category/java/performance.xml/LongInstantiation" />
	<rule ref="category/java/bestpractices.xml/JUnit4TestShouldUseTestAnnotation" />
	<rule ref="category/java/bestpractices.xml/JUnit4SuitesShouldUseSuiteAnnotation" />
	<rule ref="category/java/bestpractices.xml/JUnitUseExpected" />
	<rule ref="category/java/codestyle.xml/ShortMethodName" />
  <rule ref="category/java/codestyle.xml/FieldNamingConventions" />
  <rule ref="category/java/codestyle.xml/FormalParameterNamingConventions" />
  <rule ref="category/java/codestyle.xml/LocalVariableNamingConventions" />
	<rule ref="category/java/codestyle.xml/MethodNamingConventions" />
	<rule ref="category/java/codestyle.xml/ClassNamingConventions" />
	<rule ref="category/java/codestyle.xml/AvoidDollarSigns" />
	<rule ref="category/java/errorprone.xml/MethodWithSameNameAsEnclosingClass" />
	<rule ref="category/java/errorprone.xml/SuspiciousHashcodeMethodName" />
	<rule ref="category/java/errorprone.xml/SuspiciousEqualsMethodName" />
	<rule ref="category/java/errorprone.xml/AvoidFieldNameMatchingTypeName" />
	<rule ref="category/java/codestyle.xml/NoPackage" />
	<rule ref="category/java/codestyle.xml/PackageCase" />
	<rule ref="category/java/codestyle.xml/BooleanGetMethodName" />
	<rule ref="category/java/codestyle.xml/GenericsNaming" />
	<rule ref="category/java/codestyle.xml/LocalVariableCouldBeFinal" />
	<rule ref="category/java/codestyle.xml/MethodArgumentCouldBeFinal" />
	<rule ref="category/java/performance.xml/UseArrayListInsteadOfVector" />
	<rule ref="category/java/performance.xml/UseArraysAsList" />
	<rule ref="category/java/performance.xml/AvoidArrayLoops" />
	<rule ref="category/java/performance.xml/UnnecessaryWrapperObjectCreation" />
	<rule ref="category/java/performance.xml/AddEmptyString" />
	<rule ref="category/java/performance.xml/RedundantFieldInitializer" />
	<rule ref="category/java/codestyle.xml/PrematureDeclaration" />
	<rule ref="category/java/design.xml/ExceptionAsFlowControl" />
	<rule ref="category/java/design.xml/AvoidThrowingNullPointerException" />
	<rule ref="category/java/design.xml/DoNotExtendJavaLangError" />
	<rule ref="category/java/errorprone.xml/DoNotThrowExceptionInFinally" />
	<rule ref="category/java/design.xml/AvoidThrowingNewInstanceOfSameException" />
	<rule ref="category/java/errorprone.xml/AvoidLosingExceptionInformation" />
	<rule ref="category/java/performance.xml/StringInstantiation" />
	<rule ref="category/java/performance.xml/StringToString" />
	<rule ref="category/java/errorprone.xml/UnnecessaryCaseChange" />
	<rule ref="category/java/performance.xml/UseStringBufferLength" />
	<rule ref="category/java/performance.xml/InefficientEmptyStringCheck" />
	<rule ref="category/java/performance.xml/UselessStringValueOf" />
	<rule ref="category/java/errorprone.xml/StringBufferInstantiationWithChar" />
	<rule ref="category/java/errorprone.xml/UseEqualsToCompareStrings" />
	<rule ref="category/java/bestpractices.xml/AvoidStringBufferField" />
	<rule ref="category/java/errorprone.xml/UnnecessaryConversionTemporary" />
	<rule ref="category/java/codestyle.xml/UnnecessaryReturn" />
	<rule ref="category/java/codestyle.xml/UnnecessaryModifier" />
	<rule ref="category/java/design.xml/UselessOverridingMethod" />
	<rule ref="category/java/errorprone.xml/UselessOperationOnImmutable" />
	<rule ref="category/java/errorprone.xml/UnusedNullCheckInEquals" />
	<rule ref="category/java/bestpractices.xml/UnusedPrivateField" />
  <rule ref="category/java/bestpractices.xml/UnusedLocalVariable" />
  <rule ref="category/java/bestpractices.xml/UnusedPrivateMethod" />
  <rule ref="category/java/bestpractices.xml/UnusedFormalParameter" />

	<!-- custom rules -->
	<rule name="FeiAvoidPrintStackTrace" message="Avoid printStackTrace(); use a logger call instead."
		class="net.sourceforge.pmd.lang.rule.XPathRule" language="java">
		<description>
			Avoid printStackTrace(); use a logger call instead.
		</description>
		<priority>3</priority>
		<properties>
			<property name="xpath">
				<value>
<![CDATA[
//PrimaryExpression
[
	PrimaryPrefix/Name[contains(@Image,'printStackTrace')]
]
[
	PrimarySuffix[not(boolean(Arguments/ArgumentList/Expression))]
]
[
	not(ancestor::node()//PackageDeclaration[ends-with(@PackageNameImage, '.cli')])
]
]]>
				</value>
			</property>
		</properties>
		<example>
<![CDATA[
package com.ferguson.service.citools.cli;

class Foo {
 void bar() {
  try {
   // do something
  } catch (Exception e) {
   e.printStackTrace();
  }
 }
}

]]>
		</example>
	</rule>
	<rule name="FeiDoNotCallSystemExit" message="System.exit() should not be used"
		class="net.sourceforge.pmd.lang.rule.XPathRule" language="java">
		<description>
      Web applications and libraries should not call System.exit(),
      since only the web container or the application server should stop
      the JVM.  This rule also checks for the equivalent call
      Runtime.getRuntime().exit().

      Note that calling exit is only allowed in main() for command line
      utilities.
		</description>
		<priority>3</priority>
		<properties>
			<property name="xpath">
				<value>
<![CDATA[
//Name[
    starts-with(@Image,'System.exit')
    or
    (starts-with(@Image,'Runtime.getRuntime') and ../../PrimarySuffix[ends-with(@Image,'exit')])
]
[
    not(ancestor::MethodDeclaration[@Name='main'])
]
]]>
				</value>
			</property>
		</properties>
		<example>
<![CDATA[
class Foo {
    public static void main(final String[] args) {
    	// allowed
        System.exit(0);
    }

    public void foo() {
    	// not allowed
        System.exit(1);
   }
}
]]>
		</example>
	</rule>

  <rule name="FeiSystemPrintln" message="System.xxx.print* is used, consider using a logger."
    class="net.sourceforge.pmd.lang.rule.XPathRule" language="java">
    <description>
      System.(out|err).print* is used, consider using a logger.

      Note that this is allowed if the package name ends with .cli
    </description>
    <priority>3</priority>
    <properties>
      <property name="xpath">
        <value>
<![CDATA[
//Name[
    starts-with(@Image, 'System.out.print')
    or
    starts-with(@Image, 'System.err.print')
 ]
[
  not(
    ancestor::node()//PackageDeclaration[ends-with(@PackageNameImage, '.cli')]
    or
    ancestor::node()//PackageDeclaration[ends-with(@PackageNameImage, '.test')]  
  )
]
]]>
        </value>
      </property>
    </properties>
    <example>
<![CDATA[
    public void testA () {
        System.out.println("Entering test");
        // Better use this
        LOG.debug("Entering test");
    }
]]>
    </example>
  </rule>

	<rule name="FeiDontUseJBossLogger"
		message="org.jboss.logging is used, use org.apache.log4j.Logger instead."
		class="net.sourceforge.pmd.lang.rule.XPathRule" language="java">
		<description>
			Use log4j instead JBoss logger.
		</description>
		<priority>3</priority>
		<properties>
			<property name="xpath">
				<value>
<![CDATA[
//ImportDeclaration[starts-with(@PackageName,'org.jboss.logging')]
]]>
				</value>
			</property>
		</properties>
		<example>
<![CDATA[
// not allowed
import org.jboss.logging.*;

// instead use
import org.apache.log4j.Logger;
]]>
		</example>
	</rule>

	<rule name="FeiDontUseSlf4j"
		message="org.slf4j is used, use org.apache.log4j.Logger instead."
		class="net.sourceforge.pmd.lang.rule.XPathRule" language="java">
		<description>
			Use log4j instead of org.slf4j.
		</description>
		<priority>3</priority>
		<properties>
			<property name="xpath">
				<value>
<![CDATA[
//ImportDeclaration[starts-with(@PackageName,'org.slf4j')]
]]>
				</value>
			</property>
		</properties>
		<example>
<![CDATA[
// not allowed
import org.slf4j.*;

// instead use
import org.apache.log4j.Logger;
]]>
		</example>
	</rule>

	<rule name="FeiDontUseCommonLogging"
		message="org.apache.commons.logging is used, use org.apache.log4j.Logger instead."
		class="net.sourceforge.pmd.lang.rule.XPathRule" language="java">
		<description>
			Use log4j instead of org.apache.commons.logging.
		</description>
		<priority>3</priority>
		<properties>
			<property name="xpath">
				<value>
<![CDATA[
//ImportDeclaration[starts-with(@PackageName,'org.apache.commons.logging')]
]]>
				</value>
			</property>
		</properties>
		<example>
<![CDATA[
// not allowed
import org.apache.commons.logging.*;

// instead use
import org.apache.log4j.Logger;
]]>
		</example>
	</rule>

	<rule name="FeiDontUseSysLog"
		message="java.util.logging is used, use org.apache.log4j.Logger instead."
		class="net.sourceforge.pmd.lang.rule.XPathRule" language="java">
		<description>
			Use log4j instead of java.util.logging.
		</description>
		<priority>3</priority>
		<properties>
			<property name="xpath">
				<value>
<![CDATA[
//ImportDeclaration[starts-with(@PackageName,'java.util.logging')]
]]>
				</value>
			</property>
		</properties>
		<example>
<![CDATA[
// not allowed
import java.util.logging.*;

// instead use
import org.apache.log4j.Logger;
]]>
		</example>
	</rule>

	<rule name="FeiUseCorrectExceptionLogging" message="use correct exception logging"
		class="net.sourceforge.pmd.lang.rule.XPathRule" language="java">
		<description>
			To make sure the full stacktrace is printed out, use the
			logging statement with 2 arguments: a String and a Throwable.
			This
			rule only applies to the error and fatal logging levels.
		</description>
		<priority>3</priority>
		<properties>
			<property name="xpath">
				<value>
<![CDATA[
//CatchStatement/Block/BlockStatement/Statement/StatementExpression
/PrimaryExpression[PrimaryPrefix/Name[
    starts-with(@Image, concat(
      ancestor::ClassOrInterfaceDeclaration/ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration/FieldDeclaration[
          Type//ClassOrInterfaceType[@Image='Logger']
        ]
	    /VariableDeclarator/VariableDeclaratorId/@Name, '.')
    )
  ]
	[ends-with(@Image, 'error') or ends-with(@Image, 'fatal')]
]
[
	PrimarySuffix[@ArgumentCount=1]
	or 
	not(PrimarySuffix/Arguments//Name/@Image = ancestor::CatchStatement/FormalParameter/VariableDeclaratorId/@Name)
]
]]>
				</value>
			</property>
		</properties>
		<example>
<![CDATA[
		try {
			LOG.debug("ok");
		} catch( FirstException e ) {
			LOG.error( e.getMessage() ); // wrong
		} catch( SecondException e ) {
			LOG.error( e.getMessage(), e ); // correct
		} catch (ThirdException e) {
			LOG.error(e); // wrong
		}
]]>
		</example>
	</rule>

	<rule name="FeiCamelRestPathStartsWithVersion" message="Camel REST path must start with version number"
		class="net.sourceforge.pmd.lang.rule.XPathRule" language="java">
		<description>
			Camel REST path must start with version number.
			Note that
			this rule can only check the path if it is a string literal (ignores
			variables, constants, etc..).
		</description>
		<priority>3</priority>
		<properties>
			<property name="xpath">
				<value>
<![CDATA[
//ClassOrInterfaceDeclaration[
  //ClassOrInterfaceType[pmd-java:typeIs('org.apache.camel.builder.RouteBuilder')]
]
//Statement/StatementExpression/PrimaryExpression[PrimaryPrefix/Name[@Image='rest']]
[PrimarySuffix[1]//Arguments//Literal[not(starts-with(@Image, '"/v'))]]
]]>
				</value>
			</property>
		</properties>
		<example>
<![CDATA[
public class CamelRoute extends RouteBuilder {
    public void configure() throws Exception {
    	rest("/v1").id(...

]]>
		</example>
	</rule>

	<rule name="FeiCamelGobalOnExceptionThrowableDefined" message="onException(Throwable.class) not defined"
		class="net.sourceforge.pmd.lang.rule.XPathRule" language="java">
		<description>
			Camel routes must define a global exception handler to
			catch Throwable.
		</description>
		<priority>3</priority>
		<properties>
			<property name="xpath">
				<value>
<![CDATA[
//ClassOrInterfaceDeclaration[
  //ClassOrInterfaceType[
    pmd-java:typeIs('org.apache.camel.builder.RouteBuilder')
  ]
]
//MethodDeclaration[@Name='configure']
[not(
  //Statement/StatementExpression/PrimaryExpression[
    PrimaryPrefix/Name[@Image='onException'] 
    and
    PrimarySuffix[1]/Arguments/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/ResultType/Type[@TypeImage='Throwable']
  ]
)]
[
	not(ancestor::node()//PackageDeclaration[ends-with(@PackageNameImage, '.test')])
]
]]>
				</value>
			</property>
		</properties>
		<example>
<![CDATA[
public class CamelRoute extends RouteBuilder {
    public void configure() throws Exception {
        onException(Throwable.class)

]]>
		</example>
	</rule>

	<rule name="FeiCamelGobalOnExceptionThrowableHandled"
		message="handled(true) not set for onException(Throwable.class)"
		class="net.sourceforge.pmd.lang.rule.XPathRule" language="java">
		<description>
			Camel routes must enable exception handler to catch
			Throwable.
		</description>
		<priority>3</priority>
		<properties>
			<property name="xpath">
				<value>
<![CDATA[
//Statement/StatementExpression/PrimaryExpression[
  PrimaryPrefix/Name[@Image='onException'] 
  and
  PrimarySuffix[1]/Arguments/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/ResultType/Type[@TypeImage='Throwable']
]
[not(
  PrimarySuffix[@Image='handled']/following-sibling::PrimarySuffix[1]/Arguments/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Literal/BooleanLiteral[@True='true']
)]
[
  ancestor::MethodDeclaration[@Name='configure']
  /ancestor::ClassOrInterfaceDeclaration[
    //ClassOrInterfaceType[pmd-java:typeIs('org.apache.camel.builder.RouteBuilder')]
  ]
]
]]>
				</value>
			</property>
		</properties>
		<example>
<![CDATA[
public class CamelRoute extends RouteBuilder {
    public void configure() throws Exception {
        onException(Throwable.class).handled(true)

]]>
		</example>
	</rule>

	<rule name="FeiCamelTrace" message="do not enable camel debug tracing"
		class="net.sourceforge.pmd.lang.rule.XPathRule" language="java">
		<description>
			Do not enable camel debug tracing.
		</description>
		<priority>3</priority>
		<properties>
			<property name="xpath">
				<value>
<![CDATA[
//MethodDeclaration/Block/BlockStatement/Statement/StatementExpression/PrimaryExpression[
  PrimaryPrefix/Name[@Image='getContext']
  and
  PrimarySuffix[@Image='setTracing']/following-sibling::PrimarySuffix[1]/Arguments/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Literal/BooleanLiteral[@True='true']
]
[
	ancestor::ClassOrInterfaceDeclaration[
    	//ClassOrInterfaceType[pmd-java:typeIs('org.apache.camel.builder.RouteBuilder')]
  ]
]
]]>
				</value>
			</property>
		</properties>
		<example>
<![CDATA[
public class CamelRoute extends RouteBuilder {
    public void configure() {
        getContext().setTracing(true); // this produces extremely verbose output
]]>
		</example>
	</rule>

	<rule name="FeiUseContainerManagedPersistenceContext"
		message="use container managed persistence context via @PersistenceContext instead of application managed via @PersistenceUnit"
		class="net.sourceforge.pmd.lang.rule.XPathRule" language="java">
		<description>
			Use container managed persistence context via
			@PersistenceContext instead of application managed via
			@PersistenceUnit.
		</description>
		<priority>3</priority>
		<properties>
			<property name="xpath">
				<value>
<![CDATA[
//ClassOrInterfaceBodyDeclaration[
  FieldDeclaration/Type[@TypeImage='EntityManagerFactory']
  and
  Annotation//Name[@Image='PersistenceUnit']	
]
]]>
				</value>
			</property>
		</properties>
		<example>
<![CDATA[
public class Foo {
	// incorrect
    @PersistenceUnit(unitName = "primary")
    private EntityManagerFactory emf;
    
    // correct
    @PersistenceContext(unitName = "primary")
    private EntityManager em;
]]>
		</example>
	</rule>

	<rule name="FeiSpecifySchemaForTableAnnotation" message="schema attribute not specified for @Table"
		class="net.sourceforge.pmd.lang.rule.XPathRule" language="java">
		<description>
			Explicitly specify schema attribute in @Table annotation
			for JPA entities.
		</description>
		<priority>3</priority>
		<properties>
			<property name="xpath">
				<value>
<![CDATA[
//TypeDeclaration/Annotation/NormalAnnotation[
  Name[pmd-java:typeIs('javax.persistence.Table')]
  and
  not(MemberValuePairs/MemberValuePair[@Image='schema'])
]
]]>
				</value>
			</property>
		</properties>
		<example>
<![CDATA[
@Entity
@Table(name = "BRANCH", schema = "ODS_MANAGER")
public class BranchEntity implements Serializable {
  ...
}
]]>
		</example>
	</rule>

	<rule name="FeiTestMethodPrefix" message="@Test annotated method name should begin with &quot;test&quot;"
		class="net.sourceforge.pmd.lang.rule.XPathRule" language="java">
		<description>
			@Test annotated method name should begin with &quot;test&quot;.
		</description>
		<priority>3</priority>
		<properties>
			<property name="xpath">
				<value>
<![CDATA[
//ClassOrInterfaceBodyDeclaration
[
	MethodDeclaration[not(starts-with(@Name, 'test'))]
	and
	Annotation/*/Name[@Image='Test']
	and
	ancestor::node()//PackageDeclaration[ends-with(@PackageNameImage, '.test')]
]
]]>
				</value>
			</property>
		</properties>
		<example>
<![CDATA[
public class FooTest {
    @Test
    public void testEqualsContract() {
    	// OK
    }

    @Test
    public void equalsContract() {
    	// WRONG
    }
]]>
		</example>
	</rule>

	<rule name="FeiNonTestMethodPrefix" message="method name begins with &quot;test&quot; but is not annotated with @Test"
		class="net.sourceforge.pmd.lang.rule.XPathRule" language="java">
		<description>
			Method name begins with test but is not annotated with @Test.
		</description>
		<priority>3</priority>
		<properties>
			<property name="xpath">
				<value>
<![CDATA[
//ClassOrInterfaceBodyDeclaration
[
	MethodDeclaration[starts-with(@Name, 'test')]
	and
	not(Annotation/*/Name[@Image='Test'])
	and
	ancestor::node()//PackageDeclaration[ends-with(@PackageNameImage, '.test')]
]
]]>
				</value>
			</property>
		</properties>
		<example>
<![CDATA[
public class FooTest {
    @Test
    public void testEqualsContract() {
    	// OK
    }

    public void testMethodWithoutAnnotation() {
    	// WRONG
    }
]]>
		</example>
	</rule>

	<rule name="FeiTryWithResources" message="use try-with-resources instead of calling close() explicitly"
		class="net.sourceforge.pmd.lang.rule.XPathRule" language="java">
		<description>
			Use try-with-resources instead of calling close() explicitly.
		</description>
		<priority>3</priority>
		<properties>
			<property name="xpath">
				<value>
<![CDATA[
//Statement/StatementExpression/PrimaryExpression/PrimaryPrefix/Name[
  ends-with(@Image, '.close')
  and
  substring-before(@Image, '.close')=
    ancestor::MethodDeclaration//LocalVariableDeclaration[
      Type[not(
        pmd-java:typeIs('com.ferguson.jca.trilogie.TrilogieConnection')
        or
        pmd-java:typeIs('javax.naming.NamingEnumeration')
        or
        pmd-java:typeIs('javax.naming.ldap.InitialLdapContext')
        or
        pmd-java:typeIs('javax.naming.directory.DirContext')
        or
        pmd-java:typeIs('org.openqa.selenium.WebDriver')
        or
        pmd-java:typeIs('javax.jms.Connection')
        or
        pmd-java:typeIs('javax.jms.Session')
        or
        pmd-java:typeIs('javax.jms.MessageConsumer')
        or
        pmd-java:typeIs('javax.xml.stream.XMLStreamReader')
        or
        pmd-java:typeIs('javax.jms.QueueConnection')
        or
        pmd-java:typeIs('javax.jms.QueueSession')
        or
        pmd-java:typeIs('javax.naming.InitialContext')
      )]
    ]/@VariableName
]
]]>
				</value>
			</property>
		</properties>
		<example>
<![CDATA[
/* convert this */
final InputStream is = new InputStream(new File("foo"));
try {
    // do something with stream
} finally {
    is.close();
}

/* into this */
try (InputStream is = new InputStream(new File("foo"))) {
    // do something with stream
}
]]>
		</example>
	</rule>

	<rule name="FeiAvoidCatchInTest" message="do not catch exceptions inside JUnit tests"
		class="net.sourceforge.pmd.lang.rule.XPathRule" language="java">
		<description>
			Do not catch exceptions inside JUnit tests.
		</description>
		<priority>3</priority>
		<properties>
			<property name="xpath">
				<value>
<![CDATA[
//CatchStatement[
  ancestor::node()//PackageDeclaration[ends-with(@PackageNameImage, '.test')]
  and
  not(ancestor::node()/ClassOrInterfaceDeclaration[@Image='SplunkMessageFormatterTest'])
]
]]>
				</value>
			</property>
		</properties>
		<example>
<![CDATA[
public class ItemRouteIT {
    @Test
    public void testTransNumberSequence() {
        try {
            ...
        } catch (final Exception e) {
            // WRONG: let exception be handled by JUnit
        }
        
    }
}
]]>
		</example>
	</rule>

	<rule name="FeiForbidSuppressWarningsAnnotations" message="Annotations to suppress warnings are forbidden" 
		class="net.sourceforge.pmd.lang.rule.XPathRule" language="java">
		<description>
			@SuppressWarnings and @SuppressFBWarnings can be used to circumvent static analysis rules and can propagate bad behavior.
		</description>
		<priority>3</priority>
		<properties>
			<property name="xpath">
				<value>
<![CDATA[
//SingleMemberAnnotation//Name[@Image='SuppressWarnings' or @Image='SuppressFBWarnings']
]]>
				</value>
			</property>
		</properties>
		<example>
<![CDATA[
@SuppressWarnings("all") // forbidden
public class Foo {
	@SuppressFBWarnings("null") // forbidden
	public String foo(String x){
		...
	}

	public void bar() {
		@SuppressWarnings({"unchecked", "rawtypes"}) // forbidden
		String x = ...
		...
	}
}
]]>
		</example>
	</rule>

	<rule name="FeiDoNotUseThreads" message="To be compliant to J2EE, a webapp should not use any thread." 
		class="net.sourceforge.pmd.lang.rule.XPathRule" language="java">
		<description>
			The J2EE specification explicitly forbid use of threads.
		</description>
		<priority>3</priority>
		<properties>
			<property name="xpath">
				<value>
<![CDATA[
//ClassOrInterfaceType[@Image = 'Thread' or @Image = 'Runnable']
[
	not(ancestor::node()//PackageDeclaration[ends-with(@PackageNameImage, '.cli')])
]
]]>
				</value>
			</property>
		</properties>
		<example>
<![CDATA[
            // This is not allowed
            public class UsingThread extends Thread {

            }
			// Neither this,
			public class OtherThread implements Runnable {
				// Nor this ...
				public void methode() {
					Runnable thread = new Thread(); thread.run();
				}
			}

]]>
		</example>
	</rule>

	<rule name="FeiCamelDoNotUseDirectVM" message="Do not use direct-vm or vm in camel routes." 
		class="net.sourceforge.pmd.lang.rule.XPathRule" language="java">
		<description>
			Do not use direct-vm or vm in camel routes since it can result in war files having to be deployed in the same JVM.
		</description>
		<priority>3</priority>
		<properties>
			<property name="xpath">
				<value>
<![CDATA[
//Statement//PrimarySuffix[
  preceding::PrimarySuffix[
    @Image='to'
  ]
  or 
  preceding::PrimaryPrefix/Name[
    @Image='from'
  ]

]/Arguments//Literal[
  starts-with(@Image, '"direct-vm:')
  or
  starts-with(@Image, '"vm:')
]
]]>
				</value>
			</property>
		</properties>
		<example>
<![CDATA[
public class Foo extends RouteBuilder {
	public void configure() {
		rest(...)
			// bad
			.to("direct-vm:postSalesOrder")
			
		// also bad
		from("direct-vm:postSalesOrder")
	}
}
]]>
		</example>
	</rule>

	<rule name="FeiCamelBindingsInsteadOfHttpURLConnection" message="use camel bindings instead of HttpURLConnection" 
		class="net.sourceforge.pmd.lang.rule.XPathRule" language="java">
		<description>
			Use camel bindings instead of HttpURLConnection.
		</description>
		<priority>3</priority>
		<properties>
			<property name="xpath">
				<value>
<![CDATA[
//Type[@TypeImage='HttpURLConnection']
  [parent::FieldDeclaration or parent::LocalVariableDeclaration]
  [
    not(
      ancestor::node()//PackageDeclaration[ends-with(@PackageNameImage, '.cli')]
      or
      ancestor::node()//PackageDeclaration[contains(@PackageNameImage, 'test')]
      or
      ancestor::node()//PackageDeclaration[contains(@PackageNameImage, '.ci.')]
      or
      ancestor::node()//PackageDeclaration[contains(@PackageNameImage, 'faker')]
    )
  ]
]]>
				</value>
			</property>
		</properties>
		<example>
<![CDATA[
public class Foo {
  HttpURLConnection conn;   // fobidden
	public void foo() {
    // forbidden
    HttpURLConnection conn = ...
	}
}
]]>
		</example>
	</rule>

	<rule name="FeiCamelBindingsInsteadOfApacheHttpClient" message="use camel bindings instead of apache HttpClient" 
		class="net.sourceforge.pmd.lang.rule.XPathRule" language="java">
		<description>
			Use camel bindings instead of Apache HttpClient.
		</description>
		<priority>3</priority>
		<properties>
			<property name="xpath">
				<value>
<![CDATA[
//ImportDeclaration[
  starts-with(@PackageName, 'org.apache.http.client')
  or
  starts-with(@PackageName, 'org.apache.http.impl.client')
]
  [
    not(
      ancestor::node()//PackageDeclaration[ends-with(@PackageNameImage, '.cli')]
      or
      ancestor::node()//PackageDeclaration[contains(@PackageNameImage, 'test')]
      or
      ancestor::node()//PackageDeclaration[contains(@PackageNameImage, '.ci.')]
      or
      ancestor::node()//PackageDeclaration[contains(@PackageNameImage, 'faker')]
      or
      ancestor::node()//ClassOrInterfaceDeclaration[@Image='PopupHttpClientBean']
    )
  ]
]]>
				</value>
			</property>
		</properties>
		<example>
<![CDATA[
public class Foo {
    public void foo() {
        // use camel binding instead
        try (CloseableHttpClient client = HttpClients.createDefault()) {
          ...
        }
    }
}
]]>
		</example>
	</rule>

	<rule name="FeiCamelBindingsInsteadOfJms" message="use camel bindings instead of JMS APIs" 
		class="net.sourceforge.pmd.lang.rule.XPathRule" language="java">
		<description>
			Use camel bindings instead of JMS APIs.
		</description>
		<priority>3</priority>
		<properties>
			<property name="xpath">
				<value>
<![CDATA[
//ImportDeclaration[
  starts-with(@PackageName, 'javax.jms')
]
  [
    not(
      ancestor::node()//PackageDeclaration[ends-with(@PackageNameImage, '.cli')]
      or
      ancestor::node()//PackageDeclaration[contains(@PackageNameImage, 'test')]
      or
      ancestor::node()//PackageDeclaration[contains(@PackageNameImage, '.ci.')]
      or
      ancestor::node()//PackageDeclaration[contains(@PackageNameImage, 'faker')]
      or
      ancestor::node()//PackageDeclaration[contains(@PackageNameImage, 'com.ferguson.service.level3')]
    )
  ]
]]>
				</value>
			</property>
		</properties>
		<example>
<![CDATA[
public class Foo {
    public void foo() {
            // use camel bindings instead of JMS APIs
            final Connection connection = pooledConnectionFactory.createConnection();
            connection.start();
            final Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
            try {
                final Destination destination = session.createQueue(queueName);
                final MessageProducer producer = session.createProducer(destination);
                ...
    }
]]>
		</example>
	</rule>

	<rule name="FeiCamelBindingsInsteadOfJsch" message="use camel bindings instead of JSch" 
		class="net.sourceforge.pmd.lang.rule.XPathRule" language="java">
		<description>
			Use camel bindings instead of JSch.
		</description>
		<priority>3</priority>
		<properties>
			<property name="xpath">
				<value>
<![CDATA[
//ImportDeclaration[
  starts-with(@PackageName, 'com.jcraft.jsch')
]
  [
    not(
      ancestor::node()//PackageDeclaration[ends-with(@PackageNameImage, '.cli')]
      or
      ancestor::node()//PackageDeclaration[contains(@PackageNameImage, 'test')]
      or
      ancestor::node()//PackageDeclaration[contains(@PackageNameImage, '.ci.')]
      or
      ancestor::node()//PackageDeclaration[contains(@PackageNameImage, 'faker')]
    )
  ]
]]>
				</value>
			</property>
		</properties>
		<example>
<![CDATA[
public class Foo {
    public void foo() {
        final JSch jsch = new JSch();
        final Session session = jsch.getSession(...
        ..
    }
]]>
		</example>
	</rule>

	<rule name="FeiDeprecatedHttpClient" message="use ClosableHttpClient and try-with-resource instead of DefaultHttpClient" 
		class="net.sourceforge.pmd.lang.rule.XPathRule" language="java">
		<description>
			Use ClosableHttpClient and try-with-resource instead of DefaultHttpClient.
		</description>
		<priority>3</priority>
		<properties>
			<property name="xpath">
				<value>
<![CDATA[
//ImportDeclaration[@PackageName='import org.apache.http.impl.client.DefaultHttpClient']
  [
    not(
      ancestor::node()//ClassOrInterfaceDeclaration[@Image='PopupHttpClientBean']
    )
  ]
]]>
				</value>
			</property>
		</properties>
		<example>
<![CDATA[
// incorrect
final HttpClient client = new DefaultHttpClient();

// correct
try (CloseableHttpClient client = HttpClientBuilder.create().build()) {
  ...
}
]]>
		</example>
	</rule>

  <rule name="FeiAvoidThrowingRawExceptionTypes" message="Avoid throwing raw exception types." 
    class="net.sourceforge.pmd.lang.rule.XPathRule" language="java">
    <description>
      Rather than throwing a raw RuntimeException, Throwable, Exception, or Error, use a subclassed exception instead. These types makes it difficult to identify root causes when scaning thru the logs.
    </description>
    <priority>3</priority>
    <properties>
      <property name="xpath">
        <value>
<![CDATA[
//AllocationExpression/ClassOrInterfaceType[
    @Image='Throwable' 
    or
    @Image='Exception'
    or
    @Image='Error'
    or
    @Image='RuntimeException'
  ]
  [
    not(
      ancestor::node()//PackageDeclaration[ends-with(@PackageNameImage, '.test')]
    )
  ]
]]>
        </value>
      </property>
    </properties>
    <example>
<![CDATA[
public class Foo {
public void bar() throws Exception {
  throw new Exception();
 }
}
]]>
    </example>
  </rule>

  <rule name="FeiCamelComponentLogDebug" message="camel .log() must be set to DEBUG or TRACE level" 
    class="net.sourceforge.pmd.lang.rule.XPathRule" language="java">
    <description>
      Use the Log Route Policy in camlib-common instead of the camel component. 
      Refer to middleware logging standards.
    </description>
    <priority>3</priority>
    <properties>
      <property name="xpath">
        <value>
<![CDATA[
//PrimaryExpression[PrimaryPrefix/Name[@Image='from' or @Image='onException']]
  /PrimarySuffix[preceding-sibling::PrimarySuffix[1][@Image='log']]
  /Arguments/ArgumentList/Expression[1]//PrimaryExpression[1]
  /PrimaryPrefix[
    Name[not(contains(@Image, 'DEBUG') or contains(@Image, 'TRACE'))]
    or
    Literal
  ]
  [
    not(
      ancestor::node()//PackageDeclaration[
        contains(@PackageNameImage, '.test')
        or
        contains(@PackageNameImage, '.faker')
      ]
    )
  ]
]]>
        </value>
      </property>
    </properties>
    <example>
<![CDATA[
public class CamelRoute extends RouteBuilder {
    @Override
    public void configure()  {
      onException(Throwable.class).log(LoggingLevel.ERROR, "forbidden");
      onException(Throwable.class).log(LoggingLevel.DEBUG, "allowed");

      from("direct:a").routeId("route a").log(LoggingLevel.INFO,"forbidden");
      from("direct:b").routeId("route b").log("forbidden");
      from("direct:c").routeId("route c").log(LoggingLevel.DEBUG,"allowed");
    }
}
]]>
    </example>
  </rule>

  <rule name="FeiAvoidLogginRoutIdAsCategory" message="camel .log() category/logName must be set to this.getClass().getName()" 
    class="net.sourceforge.pmd.lang.rule.XPathRule" language="java">
    <description>
      By default, the logging category is set to the route id. 
      It needs to be set to the fully qualified class name name instead.
    </description>
    <priority>3</priority>
    <properties>
      <property name="xpath">
        <value>
<![CDATA[
//PrimaryExpression[PrimaryPrefix/Name[@Image='from' or @Image='onException']]
  /PrimarySuffix[preceding-sibling::PrimarySuffix[1][@Image='log']]
  /Arguments/ArgumentList/Expression[2][not(PrimaryExpression[
    PrimaryPrefix[@ThisModifier='true']
    and
    PrimarySuffix[@Image='getClass']
    and
    PrimarySuffix[@Image='getName']
  ])]
  [
    not(
      ancestor::node()//PackageDeclaration[
        contains(@PackageNameImage, '.test')
        or
        contains(@PackageNameImage, '.faker')
      ]
    )
  ]
]]>
        </value>
      </property>
    </properties>
    <example>
<![CDATA[
public class CamelRoute extends RouteBuilder {
    @Override
    public void configure()  {
      onException(Throwable.class).log(LoggingLevel.DEBUG, "forbidden");
      onException(Throwable.class).log(LoggingLevel.DEBUG, this.getClass().getName(), "allowed");
    }
}
]]>
    </example>
  </rule>

  <rule name="FeiAvoidCamelRouteToLog" message="do not route to log component" 
    class="net.sourceforge.pmd.lang.rule.XPathRule" language="java">
    <description>
      Routing to to the log component bypasses the standarized formatting.
      Refer to middleware logging standards.
    </description>
    <priority>3</priority>
    <properties>
      <property name="xpath">
        <value>
<![CDATA[
//PrimaryExpression[PrimaryPrefix/Name[@Image='from' or @Image='onException']]
  /PrimarySuffix[preceding-sibling::PrimarySuffix[1][@Image='to']]
  /Arguments/ArgumentList/Expression/PrimaryExpression
  /PrimaryPrefix/Literal[starts-with(@Image, '"log:')]
  [
    not(
      ancestor::node()//PackageDeclaration[
        contains(@PackageNameImage, '.test')
        or
        contains(@PackageNameImage, '.faker')
      ]
    )
  ]
]]>
        </value>
      </property>
    </properties>
    <example>
<![CDATA[
public class CamelRoute extends RouteBuilder {
    @Override
    public void configure()  {
      onException(Throwable.class).to("log:xxx");
      from("direct:a").to("log:xxx");
    }
}
]]>
    </example>
  </rule>

  <rule name="FeiUseMongoUtils" message="use MongoUtils in k8lib-common-mongo to create MongoClient object" 
    class="net.sourceforge.pmd.lang.rule.XPathRule" language="java">
    <description>
      Use MongoUtils in k8lib-common-mongo to create MongoClient object.
      This ensures connections will be created in a consistent way and
      provides a single point of maintancance when things need to be updated.
    </description>
    <priority>3</priority>
    <properties>
      <property name="xpath">
        <value>
<![CDATA[
//AllocationExpression/ClassOrInterfaceType[@Image='MongoClient']
[
  not(
    ancestor::node()//PackageDeclaration/Name[@Image='com.ferguson.mw.k8.mongo']
    and
    ancestor::node()//ClassOrInterfaceDeclaration[@Image='MongoUtils']
  )
]
]]>
        </value>
      </property>
    </properties>
    <example>
<![CDATA[
public class MongoClientProducer {
      public com.mongodb.MongoClient getMongoClient(@Value("${mongodb.endpoints}") final String endPoints,
            @Value("${mongodb.params}") final String params, @Value("${mongodb.user}") final String user,
            @Value("${mongodb.pw}") final String pw, @Value("${mongodb.ssl}") final boolean sslEnabled) {

        ...
        MongoClient client = new MongoClient(uri) // incorect

        return MongoUtils.createMongoClient(endPoints, params, pw, user); // correct
    }
}
]]>
    </example>
  </rule>
</ruleset>

